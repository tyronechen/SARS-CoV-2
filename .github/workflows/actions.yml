on:
  push:
  pull_request:
    branches:
      - master

name: Check Pipeline

jobs:
  ## pre-job to determine if a job has been run for the same SHA (e.g. on a different branch)
  Check_for_duplicate_action:
    if: (github.event_name != 'schedule')
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}

  Test-multiomics:
    needs: Check_for_duplicate_action
    ## run scheduled jobs only on main repo - do not run a duplicate job for merges etc. Do not run if commit messages include any of 'worksave' or 'skip-ci'
    if: (needs.Check_for_duplicate_action.outputs.should_skip == 'false' && !contains(github.event.head_commit.message, 'skip-ci'))
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.image }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }} - ${{ matrix.config.bioc }} - ${{ matrix.config.image }})

    strategy:
      fail-fast: false
      matrix:
        config:
          # - { os: windows-latest, r: 'release', bioc: 'devel'}
          # - { os: macOS-latest, r: 'devel', bioc: 'devel'}
          - { os: ubuntu-latest, r: 'devel', image: 'bioconductor/bioconductor_docker:RELEASE_3_13'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out repo ‚¨áÔ∏è
        uses: actions/checkout@v3

      - name: Set up R ‚ñ∂Ô∏è
        uses: r-lib/actions/setup-r@v2
        if: matrix.config.image == null
        with:
          r-version: ${{ matrix.config.r }}

      - name: Install remotes üî≠
        run: |
          install.packages('remotes')
        shell: Rscript {0}

      - name: Set BiocManager version üìÜ
        if: matrix.config.image == null
        run: |
          install.packages('BiocManager')
          BiocManager::install(version = "${{ matrix.config.bioc }}", ask = FALSE)
        shell: Rscript {0}

      - name: Query dependencies ‚ùì
        working-directory: ./multiomics
        run: |
          saveRDS(remotes::dev_package_deps(dependencies = TRUE, repos = c(getOption('repos'), BiocManager::repositories())), 'depends.Rds', version = 2)
        shell: Rscript {0}

      - name: Cache R packages üíæ
        if: runner.os != 'Windows' && matrix.config.image == null
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-bioc-${{ matrix.config.bioc }}-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-bioc-${{ matrix.config.bioc }}-

      - name: Install system dependencies üîß
        working-directory: ./multiomics
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          # Rscript -e "remotes::install_github('r-hub/sysreqs')"
          # sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          # sudo -s eval "$sysreqs"
          sudo apt-get update && sudo apt-get -y install libcurl4-openssl-dev

      - name: Install dependencies üî®
        working-directory: ./multiomics
        run: |
          options(repos = c(CRAN = "https://cran.r-project.org"))
          #BiocManager::install('aljabadi/mixOmics@devel', Ncpus=2)
          BiocManager::install('mixOmicsTeam/mixOmics', Ncpus=2)
          # remotes::install_deps(dependencies = TRUE, repos = BiocManager::repositories(), Ncpus=2)
          # remotes::install_local(dependencies = FALSE, upgrade = FALSE)
          # remotes::install_gitlab("tyagilab/sars-cov-2", subdir = "multiomics", dependencies = TRUE, Ncpus=2, INSTALL_opts="--no-multiarch", build_vignettes=FALSE)
          remotes::install_git(
            "https://github.com/tyronechen/SARS-CoV-2.git", 
            subdir = "multiomics", 
            dependencies = TRUE, 
            Ncpus=2, 
            INSTALL_opts="--no-multiarch", 
            build_vignettes=FALSE
            )
          # remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Session info üñ•Ô∏è 
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

#       - name: Run Case Study 1 ‚úÖ 
#         working-directory: ./multiomics
#         run: |
#           sh inst/scripts/casestudy1.sh

#       - name: Run Case Study 2 ‚úÖ‚úÖ 
#         if: success() || failure()
#         working-directory: ./multiomics
#         run: |
#           sh inst/scripts/casestudy2.sh

      - name: Run Case Study 3 ‚úÖ‚úÖ‚úÖ 
        if: success() || failure()
        working-directory: ./multiomics
        run: |
          sh inst/scripts/casestudy3.sh

      # - name: Check ‚úÖ‚úÖ‚úÖ‚úÖ
      #   working-directory: ./multiomics
      #   run: rcmdcheck::rcmdcheck(args = c("--no-manual"), error_on = "warning", check_dir = "check")
      #   shell: Rscript {0}

      - name: Upload results ‚¨ÜÔ∏è
        if: success() || failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: |
            results
            !results/data

      # - name: Notify Slack üì£
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # set in rep's setting >> secrets
